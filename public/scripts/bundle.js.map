{"version":3,"file":"bundle.js","mappings":"MAEA,MAAMA,EACF,WAAAC,CAAYC,EAAKC,EAAKC,EAAOC,GACzBC,KAAKJ,IAAMA,EACXI,KAAKH,IAAMA,EACXG,KAAKF,MAAQA,EACbE,KAAKC,OAASC,SAASC,cAAcJ,EACzC,CACA,MAAAK,GACI,MAAMC,EAAUH,SAASI,cAAc,OAEvCD,EAAQE,UAAY,qDACDP,KAAKJ,WAAWI,KAAKH,8FAE1BG,KAAKF,oDAGfE,KAAKC,OAAOO,OAAOH,EAC3B,EAIJ,MAAMI,EACF,WAAAd,CAAYC,EAAKC,EAAKC,EAAOY,EAAOX,GAChCC,KAAKJ,IAAMA,EACXI,KAAKH,IAAMA,EACXG,KAAKF,MAAQA,EACbE,KAAKU,MAAQA,EACbV,KAAKC,OAASC,SAASC,cAAcJ,EACzC,CACA,MAAAK,GACI,MAAMC,EAAUH,SAASI,cAAc,OAEvCD,EAAQE,UAAY,qDACDP,KAAKJ,WAAWI,KAAKH,gHAEJG,KAAKF,wDACLE,KAAKU,gLAMrCV,KAAKC,OAAOO,OAAOH,EAC3B,EAIJ,MAAMM,EAAeC,MAAOC,IACxB,MAAMC,QAAYC,MAAMF,GAExB,IAAIC,EAAIE,GACL,MAAM,IAAIC,MAAM,mBAAmBJ,cAAgBC,EAAII,UAG1D,aAAaJ,EAAIK,MAAM,EA6B3B,SAASC,IACLC,EAAMC,UAAUC,IAAI,QACpBF,EAAMC,UAAUE,OAAO,QACvBtB,SAASuB,KAAKC,MAAMC,SAAW,EACnC,CA5BAhB,EAAa,WACRiB,MAAKC,IACFA,EAAW,KAAEC,SAAQ,EAAElC,MAAKC,MAAKC,YAC7B,IAAIJ,EAASE,EAAKC,EAAKC,EAAO,UAAUM,QAAQ,GAClD,IAGVO,EAAa,kBACRiB,MAAKC,IAEFA,EAAW,KAAEC,SAAQ,EAAElC,MAAKC,MAAKC,QAAOY,YACpC,IAAID,EAAab,EAAKC,EAAKC,EAAOY,EAAO,oBAAoBN,QAAQ,GACvE,IAoBV,MAAM2B,EAAM7B,SAASC,cAAc,gBAC7BkB,EAAQnB,SAASC,cAAc,cAC/B6B,EAAO9B,SAASC,cAAc,QAKpCkB,EAAMC,UAAUC,IAAI,QAGpBQ,EAAIE,iBAAiB,SAAS,KAxB1BZ,EAAMC,UAAUC,IAAI,QACpBF,EAAMC,UAAUE,OAAO,QAEvBtB,SAASuB,KAAKC,MAAMC,SAAW,QAsBpB,IAIfK,EAAKC,iBAAiB,SAASC,IACvBb,EAAMc,SAASD,EAAEE,SACjBhB,GACJ,IAKFlB,SAAS+B,iBAAiB,WAAWC,IACrB,WAAXA,EAAEG,MAAqBhB,EAAMC,UAAUa,SAAS,SAE3Cf,GACJ,IAuCUlB,SAASC,cAAc,eAE/B8B,iBAAiB,UAAWC,IAClCA,EAAEI,iBAnCN1B,eAA2B2B,EAAOC,GAC9B,IACI,MAAMC,QAAiB1B,MAAM,SAAU,CACnC2B,OAAQ,OACRC,QAAS,CACL,eAAiB,oBAErBlB,KAAMmB,KAAKC,UAAU,CACjBN,QAAOC,qBAIIC,EAAStB,OAEzBsB,EAASzB,IACR8B,MAAM,yBACN1B,IAEA2B,OAAOC,SAASC,KAAO,4BAGvBC,QAAQC,IAAI,gBACZL,MAAM,6BAEd,CACA,MAAMM,GACFF,QAAQC,IAAI,oBAAqBC,GACjCN,MAAM,+BACV,CACJ,CAUIO,CAHcnD,SAASC,cAAc,eAAemD,MACnCpD,SAASC,cAAc,cAAcmD,MAE1B,G","sources":["webpack://website_sell_flowers/./public/scripts/index.js"],"sourcesContent":["// МОДУЛЬ 1: СОЗДАНИЕ КАРТОЧЕК ТОВАРОВ\r\n// использую классы для создания карточкек категорий\r\nclass MenuCard {\r\n    constructor(img, alt, title, parentSelector) {\r\n        this.img = img;\r\n        this.alt = alt;\r\n        this.title = title;\r\n        this.parent = document.querySelector(parentSelector);\r\n    }\r\n    render() {\r\n        const elenent = document.createElement('div');\r\n        \r\n        elenent.innerHTML = `<div class=\"good-card\">\r\n                <img src=${this.img} alt=${this.alt} class=\"goods-main\">\r\n                <div class=\"green-category\">\r\n                    ${this.title}\r\n                </div>\r\n            </div>`;\r\n            this.parent.append(elenent);\r\n    }\r\n}\r\n\r\n//класс карточки со скидками\r\nclass MenuDicsount {\r\n    constructor(img, alt, title, price, parentSelector) {\r\n        this.img = img;\r\n        this.alt = alt;\r\n        this.title = title;\r\n        this.price = price;\r\n        this.parent = document.querySelector(parentSelector);\r\n    }\r\n    render() {\r\n        const elenent = document.createElement('div');\r\n        \r\n        elenent.innerHTML = `<div class=\"good-card\">\r\n                <img src=${this.img} alt=${this.alt} class=\"goods-main\">\r\n                <div class=\"title-disc\">\r\n                    <p class=\"title-disc\">${this.title}</p>\r\n                    <p class=\"price-disc\">${this.price} руб.</p>\r\n                </div>\r\n                <div class=\"green-category-disc\">\r\n                    Добавить в корзину\r\n                </div>\r\n            </div>`;\r\n            this.parent.append(elenent);\r\n    }\r\n}\r\n\r\n//получение данных для карточки товара с JSON \r\nconst getResourses = async (url) => {\r\n    const res = await fetch(url);\r\n\r\n    if(!res.ok) {\r\n       throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n    }\r\n\r\n    return await res.json();\r\n}\r\n\r\n//вызов функции\r\n//строим карточки товаров, фетчим данные db.json\r\ngetResourses('db.json')\r\n    .then(data => {\r\n        data['menu'].forEach(({img, alt, title}) => {\r\n            new MenuCard(img, alt, title, '.goods').render();\r\n        });\r\n    });\r\n\r\ngetResourses('discounts.json')\r\n    .then(data => {\r\n        \r\n        data['menu'].forEach(({img, alt, title, price}) => {\r\n            new MenuDicsount(img, alt, title, price, '.goods-discounts').render();\r\n        });\r\n    });\r\n\r\n\r\n// МОДУЛЬ 2: ФОРМА АВТОРИЗАЦИИ\r\nfunction openModal() {\r\n    modal.classList.add('show');\r\n    modal.classList.remove('hide');\r\n    //запретили скролл\r\n    document.body.style.overflow = 'hidden';\r\n}\r\n\r\nfunction closeModal() {\r\n    modal.classList.add('hide');\r\n    modal.classList.remove('show');\r\n    document.body.style.overflow = '';\r\n}\r\n\r\n\r\n//открытие формы авторизации\r\nconst btn = document.querySelector('#login-enter'),\r\n      modal = document.querySelector('.login-div'),\r\n      main = document.querySelector('main');\r\n    \r\n   \r\n\r\n// добавили класс скрытия, чтобы не показывать окно при загрузке стартовой страницы\r\nmodal.classList.add('hide');\r\n\r\n//обрабтчки открытия модального окна\r\nbtn.addEventListener('click', ()=> {\r\n    openModal();\r\n});\r\n\r\n//закрытие формы авторизации по клику на остальное поле\r\nmain.addEventListener('click', e => {\r\n    if(!modal.contains(e.target)) {\r\n        closeModal();\r\n    }\r\n});\r\n\r\n\r\n  //обработчик закрытия окна при клике на ESC\r\n  document.addEventListener('keydown',(e) => {\r\n    if(e.code === 'Escape' && modal.classList.contains('show')) \r\n        {\r\n            closeModal();\r\n        }\r\n});\r\n\r\n\r\n\r\n//МОДУЛЬ 3: ОТПРАВКА POST ЗАПРОСОВ ФОРМЫ АВТОРИЗАЦИИ\r\n//функция отправки запроса авторизации\r\nasync function loginSubmit(email, password) {\r\n    try {\r\n        const response = await fetch('/login', {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-type\" : \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                email, password\r\n            }),\r\n        });\r\n\r\n        const data = await response.json();\r\n        //успешный вход\r\n        if(response.ok) {\r\n            alert('Вход успешно выполнен');\r\n            closeModal();\r\n            //редирект на на главную страницу\r\n            window.location.href = \"http://localhost:3001/#\";\r\n        }\r\n        else {\r\n            console.log('Ошибка входа');\r\n            alert('Неверный логин или пароль');\r\n        }\r\n    } \r\n    catch(error) {\r\n        console.log('Ошибка соединения', error);\r\n        alert('Ошибка соединения с сервером');\r\n    }\r\n}\r\n\r\n\r\nconst formLogin = document.querySelector('.form-login');\r\n//обработчик события отправки формы\r\nformLogin.addEventListener('submit', (e)=> {\r\n    e.preventDefault();\r\n    const login = document.querySelector('#email-user').value,\r\n          password = document.querySelector('#pass-user').value;\r\n    \r\n    loginSubmit(login, password);\r\n})"],"names":["MenuCard","constructor","img","alt","title","parentSelector","this","parent","document","querySelector","render","elenent","createElement","innerHTML","append","MenuDicsount","price","getResourses","async","url","res","fetch","ok","Error","status","json","closeModal","modal","classList","add","remove","body","style","overflow","then","data","forEach","btn","main","addEventListener","e","contains","target","code","preventDefault","email","password","response","method","headers","JSON","stringify","alert","window","location","href","console","log","error","loginSubmit","value"],"sourceRoot":""}