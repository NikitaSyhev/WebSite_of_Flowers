{"version":3,"file":"bundle.js","mappings":"mBAMAA,OAAOC,iBAAiB,oBAAoB,MCN5C,WAGA,MAAMC,EACF,WAAAC,CAAYC,EAAKC,EAAKC,EAAOC,GACzBC,KAAKJ,IAAMA,EACXI,KAAKH,IAAMA,EACXG,KAAKF,MAAQA,EACbE,KAAKC,OAASC,SAASC,cAAcJ,EACzC,CACA,MAAAK,GACI,MAAMC,EAAUH,SAASI,cAAc,OAEvCD,EAAQE,UAAY,qDACDP,KAAKJ,WAAWI,KAAKH,8FAE1BG,KAAKF,oDAGfE,KAAKC,OAAOO,OAAOH,EAC3B,EAIJ,MAAMI,EACF,WAAAd,CAAYC,EAAKC,EAAKC,EAAOY,EAAOX,GAChCC,KAAKJ,IAAMA,EACXI,KAAKH,IAAMA,EACXG,KAAKF,MAAQA,EACbE,KAAKU,MAAQA,EACbV,KAAKC,OAASC,SAASC,cAAcJ,EACzC,CACA,MAAAK,GACI,MAAMC,EAAUH,SAASI,cAAc,OAEvCD,EAAQE,UAAY,qDACDP,KAAKJ,WAAWI,KAAKH,gHAEJG,KAAKF,wDACLE,KAAKU,gLAMrCV,KAAKC,OAAOO,OAAOH,EAC3B,EAIJ,MAAMM,EAAeC,MAAOC,IACxB,MAAMC,QAAYC,MAAMF,GAExB,IAAIC,EAAIE,GACL,MAAM,IAAIC,MAAM,mBAAmBJ,cAAgBC,EAAII,UAG1D,aAAaJ,EAAIK,MAAM,EAK3BR,EAAa,WACRS,MAAKC,IACFA,EAAW,KAAEC,SAAQ,EAAE1B,MAAKC,MAAKC,YAC7B,IAAIJ,EAASE,EAAKC,EAAKC,EAAO,UAAUM,QAAQ,GAClD,IAGVO,EAAa,kBACRS,MAAKC,IAEFA,EAAW,KAAEC,SAAQ,EAAE1B,MAAKC,MAAKC,QAAOY,YACpC,IAAID,EAAab,EAAKC,EAAKC,EAAOY,EAAO,oBAAoBN,QAAQ,GACvE,GAGV,EDtEI,GEPJ,WASA,SAASmB,IACLC,EAAMC,UAAUC,IAAI,QACpBF,EAAMC,UAAUE,OAAO,QACvBzB,SAAS0B,KAAKC,MAAMC,SAAW,EACnC,CAIA,MAAMC,EAAM7B,SAASC,cAAc,gBAC7BqB,EAAQtB,SAASC,cAAc,cAC/B6B,EAAO9B,SAASC,cAAc,QAKpCqB,EAAMC,UAAUC,IAAI,QAGpBK,EAAItC,iBAAiB,SAAS,KAxB1B+B,EAAMC,UAAUC,IAAI,QACpBF,EAAMC,UAAUE,OAAO,QAEvBzB,SAAS0B,KAAKC,MAAMC,SAAW,QAsBpB,IAIfE,EAAKvC,iBAAiB,SAASwC,IACvBT,EAAMU,SAASD,EAAEE,SACjBZ,GACJ,IAKFrB,SAAST,iBAAiB,WAAWwC,IACrB,WAAXA,EAAEG,MAAqBZ,EAAMC,UAAUS,SAAS,SAE3CX,GACJ,IAuCUrB,SAASC,cAAc,eAE/BV,iBAAiB,UAAWwC,IAClCA,EAAEI,iBAnCNzB,eAA2B0B,EAAOC,GAC9B,IACI,MAAMC,QAAiBzB,MAAM,SAAU,CACnC0B,OAAQ,OACRC,QAAS,CACL,eAAiB,oBAErBd,KAAMe,KAAKC,UAAU,CACjBN,QAAOC,qBAIIC,EAASrB,OAEzBqB,EAASxB,IACR6B,MAAM,yBACNtB,IAEA/B,OAAOsD,SAASC,KAAO,4BAGvBC,QAAQC,IAAI,gBACZJ,MAAM,6BAEd,CACA,MAAMK,GACFF,QAAQC,IAAI,oBAAqBC,GACjCL,MAAM,+BACV,CACJ,CAUIM,CAHcjD,SAASC,cAAc,eAAeiD,MACnClD,SAASC,cAAc,cAAciD,MAE1B,GAEhC,CFpFI,EAAM,G","sources":["webpack://website_sell_flowers/./public/scripts/index.js","webpack://website_sell_flowers/./public/scripts/modules/cards.js","webpack://website_sell_flowers/./public/scripts/modules/auth.js"],"sourcesContent":["\r\nimport cards from \"./modules/cards\";\r\nimport auth from \"./modules/auth\";\r\n\r\n\r\n\r\nwindow.addEventListener('DOMContentLoaded', ()=> {\r\n    cards();\r\n    auth();\r\n\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n// МОДУЛЬ 1: СОЗДАНИЕ КАРТОЧЕК ТОВАРОВ\r\n// использую классы для создания карточкек категорий\r\n// class MenuCard {\r\n//     constructor(img, alt, title, parentSelector) {\r\n//         this.img = img;\r\n//         this.alt = alt;\r\n//         this.title = title;\r\n//         this.parent = document.querySelector(parentSelector);\r\n//     }\r\n//     render() {\r\n//         const elenent = document.createElement('div');\r\n        \r\n//         elenent.innerHTML = `<div class=\"good-card\">\r\n//                 <img src=${this.img} alt=${this.alt} class=\"goods-main\">\r\n//                 <div class=\"green-category\">\r\n//                     ${this.title}\r\n//                 </div>\r\n//             </div>`;\r\n//             this.parent.append(elenent);\r\n//     }\r\n// }\r\n\r\n// //класс карточки со скидками\r\n// class MenuDicsount {\r\n//     constructor(img, alt, title, price, parentSelector) {\r\n//         this.img = img;\r\n//         this.alt = alt;\r\n//         this.title = title;\r\n//         this.price = price;\r\n//         this.parent = document.querySelector(parentSelector);\r\n//     }\r\n//     render() {\r\n//         const elenent = document.createElement('div');\r\n        \r\n//         elenent.innerHTML = `<div class=\"good-card\">\r\n//                 <img src=${this.img} alt=${this.alt} class=\"goods-main\">\r\n//                 <div class=\"title-disc\">\r\n//                     <p class=\"title-disc\">${this.title}</p>\r\n//                     <p class=\"price-disc\">${this.price} руб.</p>\r\n//                 </div>\r\n//                 <div class=\"green-category-disc\">\r\n//                     Добавить в корзину\r\n//                 </div>\r\n//             </div>`;\r\n//             this.parent.append(elenent);\r\n//     }\r\n// }\r\n\r\n// //получение данных для карточки товара с JSON \r\n// const getResourses = async (url) => {\r\n//     const res = await fetch(url);\r\n\r\n//     if(!res.ok) {\r\n//        throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();\r\n// }\r\n\r\n// //вызов функции\r\n// //строим карточки товаров, фетчим данные db.json\r\n// getResourses('db.json')\r\n//     .then(data => {\r\n//         data['menu'].forEach(({img, alt, title}) => {\r\n//             new MenuCard(img, alt, title, '.goods').render();\r\n//         });\r\n//     });\r\n\r\n// getResourses('discounts.json')\r\n//     .then(data => {\r\n        \r\n//         data['menu'].forEach(({img, alt, title, price}) => {\r\n//             new MenuDicsount(img, alt, title, price, '.goods-discounts').render();\r\n//         });\r\n//     });\r\n\r\n\r\n// // МОДУЛЬ 2: ФОРМА АВТОРИЗАЦИИ\r\n// function openModal() {\r\n//     modal.classList.add('show');\r\n//     modal.classList.remove('hide');\r\n//     //запретили скролл\r\n//     document.body.style.overflow = 'hidden';\r\n// }\r\n\r\n// function closeModal() {\r\n//     modal.classList.add('hide');\r\n//     modal.classList.remove('show');\r\n//     document.body.style.overflow = '';\r\n// }\r\n\r\n\r\n// //открытие формы авторизации\r\n// const btn = document.querySelector('#login-enter'),\r\n//       modal = document.querySelector('.login-div'),\r\n//       main = document.querySelector('main');\r\n    \r\n   \r\n\r\n// // добавили класс скрытия, чтобы не показывать окно при загрузке стартовой страницы\r\n// modal.classList.add('hide');\r\n\r\n// //обрабтчки открытия модального окна\r\n// btn.addEventListener('click', ()=> {\r\n//     openModal();\r\n// });\r\n\r\n// //закрытие формы авторизации по клику на остальное поле\r\n// main.addEventListener('click', e => {\r\n//     if(!modal.contains(e.target)) {\r\n//         closeModal();\r\n//     }\r\n// });\r\n\r\n\r\n//   //обработчик закрытия окна при клике на ESC\r\n//   document.addEventListener('keydown',(e) => {\r\n//     if(e.code === 'Escape' && modal.classList.contains('show')) \r\n//         {\r\n//             closeModal();\r\n//         }\r\n// });\r\n\r\n\r\n\r\n// //МОДУЛЬ 3: ОТПРАВКА POST ЗАПРОСОВ ФОРМЫ АВТОРИЗАЦИИ\r\n// //функция отправки запроса авторизации\r\n// async function loginSubmit(email, password) {\r\n//     try {\r\n//         const response = await fetch('/login', {\r\n//             method: \"POST\",\r\n//             headers: {\r\n//                 \"Content-type\" : \"application/json\",\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 email, password\r\n//             }),\r\n//         });\r\n\r\n//         const data = await response.json();\r\n//         //успешный вход\r\n//         if(response.ok) {\r\n//             alert('Вход успешно выполнен');\r\n//             closeModal();\r\n//             //редирект на на главную страницу\r\n//             window.location.href = \"http://localhost:3001/#\";\r\n//         }\r\n//         else {\r\n//             console.log('Ошибка входа');\r\n//             alert('Неверный логин или пароль');\r\n//         }\r\n//     } \r\n//     catch(error) {\r\n//         console.log('Ошибка соединения', error);\r\n//         alert('Ошибка соединения с сервером');\r\n//     }\r\n// }\r\n\r\n\r\n// const formLogin = document.querySelector('.form-login');\r\n// //обработчик события отправки формы\r\n// formLogin.addEventListener('submit', (e)=> {\r\n//     e.preventDefault();\r\n//     const login = document.querySelector('#email-user').value,\r\n//           password = document.querySelector('#pass-user').value;\r\n    \r\n//     loginSubmit(login, password);\r\n// })","function cards() {\r\n// МОДУЛЬ 1: СОЗДАНИЕ КАРТОЧЕК ТОВАРОВ\r\n// использую классы для создания карточкек категорий\r\nclass MenuCard {\r\n    constructor(img, alt, title, parentSelector) {\r\n        this.img = img;\r\n        this.alt = alt;\r\n        this.title = title;\r\n        this.parent = document.querySelector(parentSelector);\r\n    }\r\n    render() {\r\n        const elenent = document.createElement('div');\r\n        \r\n        elenent.innerHTML = `<div class=\"good-card\">\r\n                <img src=${this.img} alt=${this.alt} class=\"goods-main\">\r\n                <div class=\"green-category\">\r\n                    ${this.title}\r\n                </div>\r\n            </div>`;\r\n            this.parent.append(elenent);\r\n    }\r\n}\r\n\r\n//класс карточки со скидками\r\nclass MenuDicsount {\r\n    constructor(img, alt, title, price, parentSelector) {\r\n        this.img = img;\r\n        this.alt = alt;\r\n        this.title = title;\r\n        this.price = price;\r\n        this.parent = document.querySelector(parentSelector);\r\n    }\r\n    render() {\r\n        const elenent = document.createElement('div');\r\n        \r\n        elenent.innerHTML = `<div class=\"good-card\">\r\n                <img src=${this.img} alt=${this.alt} class=\"goods-main\">\r\n                <div class=\"title-disc\">\r\n                    <p class=\"title-disc\">${this.title}</p>\r\n                    <p class=\"price-disc\">${this.price} руб.</p>\r\n                </div>\r\n                <div class=\"green-category-disc\">\r\n                    Добавить в корзину\r\n                </div>\r\n            </div>`;\r\n            this.parent.append(elenent);\r\n    }\r\n}\r\n\r\n//получение данных для карточки товара с JSON \r\nconst getResourses = async (url) => {\r\n    const res = await fetch(url);\r\n\r\n    if(!res.ok) {\r\n       throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n    }\r\n\r\n    return await res.json();\r\n}\r\n\r\n//вызов функции\r\n//строим карточки товаров, фетчим данные db.json\r\ngetResourses('db.json')\r\n    .then(data => {\r\n        data['menu'].forEach(({img, alt, title}) => {\r\n            new MenuCard(img, alt, title, '.goods').render();\r\n        });\r\n    });\r\n\r\ngetResourses('discounts.json')\r\n    .then(data => {\r\n        \r\n        data['menu'].forEach(({img, alt, title, price}) => {\r\n            new MenuDicsount(img, alt, title, price, '.goods-discounts').render();\r\n        });\r\n    });\r\n\r\n}\r\n\r\nexport default cards;","function auth() {\r\n    // МОДУЛЬ 2: ФОРМА АВТОРИЗАЦИИ\r\nfunction openModal() {\r\n    modal.classList.add('show');\r\n    modal.classList.remove('hide');\r\n    //запретили скролл\r\n    document.body.style.overflow = 'hidden';\r\n}\r\n\r\nfunction closeModal() {\r\n    modal.classList.add('hide');\r\n    modal.classList.remove('show');\r\n    document.body.style.overflow = '';\r\n}\r\n\r\n\r\n//открытие формы авторизации\r\nconst btn = document.querySelector('#login-enter'),\r\n      modal = document.querySelector('.login-div'),\r\n      main = document.querySelector('main');\r\n    \r\n   \r\n\r\n// добавили класс скрытия, чтобы не показывать окно при загрузке стартовой страницы\r\nmodal.classList.add('hide');\r\n\r\n//обрабтчки открытия модального окна\r\nbtn.addEventListener('click', ()=> {\r\n    openModal();\r\n});\r\n\r\n//закрытие формы авторизации по клику на остальное поле\r\nmain.addEventListener('click', e => {\r\n    if(!modal.contains(e.target)) {\r\n        closeModal();\r\n    }\r\n});\r\n\r\n\r\n  //обработчик закрытия окна при клике на ESC\r\n  document.addEventListener('keydown',(e) => {\r\n    if(e.code === 'Escape' && modal.classList.contains('show')) \r\n        {\r\n            closeModal();\r\n        }\r\n});\r\n\r\n\r\n\r\n//МОДУЛЬ 3: ОТПРАВКА POST ЗАПРОСОВ ФОРМЫ АВТОРИЗАЦИИ\r\n//функция отправки запроса авторизации\r\nasync function loginSubmit(email, password) {\r\n    try {\r\n        const response = await fetch('/login', {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-type\" : \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                email, password\r\n            }),\r\n        });\r\n\r\n        const data = await response.json();\r\n        //успешный вход\r\n        if(response.ok) {\r\n            alert('Вход успешно выполнен');\r\n            closeModal();\r\n            //редирект на на главную страницу\r\n            window.location.href = \"http://localhost:3001/#\";\r\n        }\r\n        else {\r\n            console.log('Ошибка входа');\r\n            alert('Неверный логин или пароль');\r\n        }\r\n    } \r\n    catch(error) {\r\n        console.log('Ошибка соединения', error);\r\n        alert('Ошибка соединения с сервером');\r\n    }\r\n}\r\n\r\n\r\nconst formLogin = document.querySelector('.form-login');\r\n//обработчик события отправки формы\r\nformLogin.addEventListener('submit', (e)=> {\r\n    e.preventDefault();\r\n    const login = document.querySelector('#email-user').value,\r\n          password = document.querySelector('#pass-user').value;\r\n    \r\n    loginSubmit(login, password);\r\n})\r\n}\r\n\r\nexport default auth;"],"names":["window","addEventListener","MenuCard","constructor","img","alt","title","parentSelector","this","parent","document","querySelector","render","elenent","createElement","innerHTML","append","MenuDicsount","price","getResourses","async","url","res","fetch","ok","Error","status","json","then","data","forEach","closeModal","modal","classList","add","remove","body","style","overflow","btn","main","e","contains","target","code","preventDefault","email","password","response","method","headers","JSON","stringify","alert","location","href","console","log","error","loginSubmit","value"],"sourceRoot":""}